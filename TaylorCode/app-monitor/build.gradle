apply plugin: 'com.android.library'

android {
    compileSdkVersion 26



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //depend on single jar
//    implementation files('libs/FeedsSDK.jar')

    implementation 'com.android.support:appcompat-v7:25.3.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

//    implementation 'com.loopj.android:android-async-http:1.4.9'
}


def OUTPUT_DIR = project.rootDir.path + '/app/libs'

//make this module into a jar including third-party library
task makeJar(type: Jar) {
    baseName ='app-monitor-with-another-library'
    //delete the former one jar
//    delete(project.rootDir.path+'/libs/'+baseName+".jar")
    destinationDir = file(OUTPUT_DIR)

    from('build/intermediates/classes/release')
    //this has the same effect as the above
//    from(project.zipTree(project.rootDir.path + '/feedsnews/build/intermediates/bundles/release/classes.jar'))
    from(project.zipTree(project.rootDir.path + '/app-monitor/libs/classes.jar'))

    exclude('**/BuildConfig.class')
    exclude('**/BuildConfig\$*.class')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('android/support')
    exclude('com/google')
    exclude('andorid/app')
    //exclude specific classes
    exclude('rx/android/plugins/RxAndroidPlugins.class')

}
makeJar.dependsOn(build)

task t1{
    group 'taylor'
    println("---task 1---")
}

task t2{
    group 'taylor'
    description 'test for dependsOn'
    println("---task 2---")
}
//gradle case1:run tasks in sequence
//t2.dependsOn t1
t2.mustRunAfter(t1)

