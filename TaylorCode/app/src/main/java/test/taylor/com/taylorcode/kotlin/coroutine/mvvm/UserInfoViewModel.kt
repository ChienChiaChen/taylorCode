package test.taylor.com.taylorcode.kotlin.coroutine.mvvm

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import tech.thdev.network.flowcalladapterfactory.FlowCallAdapterFactory
import test.taylor.com.taylorcode.retrofit.repository_livedata.LiveDataCallAdapterFactory
import test.taylor.com.taylorcode.retrofit.repository_livedata.room.NewsDatabase

class UserInfoViewModel(private val userInfoRepo: UserInfoRepo) : ViewModel() {
    private val _userInfoStateFlow = MutableStateFlow(UserInfoModel(loading = true))
    val userInfoStateFlow: StateFlow<UserInfoModel> = _userInfoStateFlow


    /**
     * case: use StateFlow like LiveData
     */
    fun fetchUserInfo() {
        viewModelScope.launch {
            delay(2000)
            val userInfo = userInfoStateFlow.value.copy(userName = "taylor", loading = false)
            _userInfoStateFlow.emit(userInfo)
        }
    }

    /**
     * case: process flow generated by repo, and convert repo data to ui model
     */
    val userInfoSharedFlow =
        flowOf(userInfoRepo.localUserInfoFlow, userInfoRepo.remoteUserInfoFlow)
            .flattenMerge()
            .map { UserInfoModel(userName = it.name, loading = false) }
            .onStart { emit(UserInfoModel(userName = "", loading = true)) }
            .shareIn(viewModelScope, SharingStarted.WhileSubscribed())

    val newsFlow =
        flowOf(userInfoRepo.localNewsFlow, userInfoRepo.remoteNewsFlow)
            .flattenMerge()
            .map { NewsModel(it, false) }
            .onStart { emit(NewsModel(emptyList(), true)) }
            .shareIn(viewModelScope, SharingStarted.WhileSubscribed())
}

/**
 * case: inject repo instance which need context as an input param
 */
class UserInfoViewModelFactory(private val userInfoRepo: UserInfoRepo) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        return UserInfoViewModel(userInfoRepo) as T
    }
}